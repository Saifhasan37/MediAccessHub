# MediAccessHub - Startup Guide

## 🏥 Overview
MediAccessHub is a comprehensive medical appointment management system built with the MERN stack (MongoDB, Express.js, React, Node.js). This system provides separate interfaces for patients, doctors, and administrators to manage appointments, medical records, and schedules efficiently.

## 📁 Project Structure
```
NIT3003_Group_08 2/
├── app/
│   ├── backend/                 # Node.js/Express.js backend
│   │   ├── controllers/         # Request handlers
│   │   ├── middleware/          # Custom middleware
│   │   ├── models/             # Database models
│   │   ├── routes/             # API routes
│   │   ├── utils/              # Utility functions
│   │   ├── config.env          # Environment variables
│   │   ├── server.js           # Main server file
│   │   └── package.json        # Backend dependencies
│   ├── frontend/               # React.js frontend
│   │   ├── src/
│   │   │   ├── components/     # Reusable UI components
│   │   │   ├── pages/          # Page components
│   │   │   ├── contexts/       # React contexts
│   │   │   ├── services/       # API services
│   │   │   ├── types/          # TypeScript type definitions
│   │   │   ├── hooks/          # Custom React hooks
│   │   │   └── utils/          # Utility functions
│   │   └── package.json        # Frontend dependencies
│   └── README.md               # Main project documentation
├── startup.readme              # This file
└── start-app.sh               # Application startup script
```

## 🛠️ Prerequisites

Before starting the application, ensure you have the following installed:

### Required Software
- **Node.js** (v16 or higher) - [Download here](https://nodejs.org/)
- **MongoDB** (v4.4 or higher) - [Download here](https://www.mongodb.com/try/download/community)
- **npm** (comes with Node.js)
- **Git** (for version control)

### System Requirements
- **Operating System**: Windows 10/11, macOS 10.15+, or Linux
- **RAM**: Minimum 4GB (8GB recommended)
- **Storage**: At least 2GB free space
- **Internet Connection**: Required for downloading dependencies

## 🚀 Quick Start Guide

### Step 1: Clone and Navigate to Project
```bash
# Navigate to the project directory
cd "/path/to/NIT3003_Group_08 2"

# Verify you're in the correct directory
ls -la
# You should see: app/, startup.readme, start-app.sh, etc.
```

### Step 2: Install Dependencies

#### Backend Dependencies
```bash
# Navigate to backend directory
cd app/backend

# Install backend dependencies
npm install

# Verify installation
npm list --depth=0
```

#### Frontend Dependencies
```bash
# Navigate to frontend directory (from project root)
cd ../frontend

# Install frontend dependencies
npm install

# Verify installation
npm list --depth=0
```

### Step 3: Environment Setup

#### Backend Environment Configuration
```bash
# Navigate to backend directory
cd app/backend

# Copy the environment template (if not exists)
cp config.env.example config.env

# Edit the config.env file with your settings
# The file should contain:
```

**config.env contents:**
```env
# Server Configuration
PORT=5001
NODE_ENV=development

# Database Configuration
MONGODB_URI=mongodb://localhost:27017/mediaccesshub

# JWT Configuration
JWT_SECRET=your-super-secret-jwt-key-here-make-it-long-and-random
JWT_EXPIRE=7d

# Frontend URL
FRONTEND_URL=http://localhost:3000
```

### Step 4: Database Setup

#### Start MongoDB
```bash
# On macOS (using Homebrew)
brew services start mongodb-community

# On Windows (if installed as service)
net start MongoDB

# On Linux (using systemctl)
sudo systemctl start mongod

# Verify MongoDB is running
mongosh --eval "db.adminCommand('ismaster')"
```

#### Seed the Database
```bash
# Navigate to backend directory
cd app/backend

# Seed the database with initial data
node seed-database.js

# Create schedule data
node seed-schedules.js
```

### Step 5: Start the Application

#### Option 1: Using the Startup Script (Recommended)
```bash
# From the project root directory
./start-app.sh

# Or if you don't have execute permissions:
bash start-app.sh
```

#### Option 2: Manual Start (Two Terminal Windows)

**Terminal 1 - Backend Server:**
```bash
# Navigate to backend directory
cd app/backend

# Start the backend server
npm start
# or for development with auto-restart:
npm run dev
```

**Terminal 2 - Frontend Server:**
```bash
# Navigate to frontend directory
cd app/frontend

# Start the frontend development server
npm start
```

## 🌐 Access the Application

Once both servers are running, you can access the application:

- **Frontend Application**: http://localhost:3000
- **Backend API**: http://localhost:5001/api
- **API Health Check**: http://localhost:5001/api/health

## 👥 Default User Accounts

The application comes with pre-seeded user accounts:

### Admin Account
- **Email**: admin@example.com
- **Password**: adminpass123
- **Role**: Administrator
- **Access**: Full system management

### Doctor Accounts
- **Email**: doctor1@example.com
- **Password**: doctorpass123
- **Role**: Doctor (Cardiology)
- **Email**: joint@example.com
- **Password**: doctorpass123
- **Role**: Doctor (General Medicine)

### Patient Account
- **Email**: test@example.com
- **Password**: password123
- **Role**: Patient

### New Test Accounts (Created for Demo)
- **Doctor**: dr.emily.davis@example.com / doctorpass123 (Dermatology)
- **Patient**: alice.johnson@example.com / patientpass123

## 🔧 Troubleshooting

### Common Issues and Solutions

#### 1. Port Already in Use
```bash
# Check what's using the port
lsof -i :3000  # For frontend
lsof -i :5001  # For backend

# Kill the process if needed
kill -9 <PID>
```

#### 2. MongoDB Connection Issues
```bash
# Check if MongoDB is running
brew services list | grep mongodb

# Start MongoDB if not running
brew services start mongodb-community

# Check MongoDB logs
tail -f /usr/local/var/log/mongodb/mongo.log
```

#### 3. Node Modules Issues
```bash
# Clear npm cache and reinstall
npm cache clean --force
rm -rf node_modules package-lock.json
npm install
```

#### 4. Environment Variables Issues
```bash
# Verify config.env exists and has correct values
cat app/backend/config.env

# Check if variables are being loaded
cd app/backend
node -e "require('dotenv').config({path: './config.env'}); console.log(process.env.PORT)"
```

#### 5. Frontend Build Issues
```bash
# Clear frontend build and reinstall
cd app/frontend
rm -rf node_modules package-lock.json build
npm install
npm start
```

## 📊 Application Features

### Patient Features
- User registration and authentication
- View and manage medical records
- Book and manage appointments
- View doctor availability
- Profile management

### Doctor Features
- Doctor registration and authentication
- Manage medical records for patients
- Update availability and schedule
- View and manage appointments
- Dashboard with patient statistics

### Admin Features
- User management (patients, doctors)
- System-wide appointment oversight
- Schedule management
- User profile management
- System analytics and reporting

## 🔐 Security Features

- JWT-based authentication
- Role-based access control
- Password hashing with bcrypt
- Input validation and sanitization
- CORS protection
- Rate limiting

## 📱 API Endpoints

### Authentication
- `POST /api/auth/login` - User login
- `POST /api/auth/register` - User registration
- `GET /api/auth/me` - Get current user
- `POST /api/auth/logout` - User logout

### Appointments
- `GET /api/appointments/my-appointments` - Get user's appointments
- `POST /api/appointments` - Create appointment
- `GET /api/appointments/available-slots` - Get available time slots

### Users
- `GET /api/users/doctors` - Get all doctors
- `GET /api/users/patients` - Get all patients

### Admin
- `GET /api/admin/users` - Get all users (Admin only)
- `GET /api/admin/stats` - Get system statistics (Admin only)

## 🧪 Testing

### Patient Portal Testing Suite
Access the built-in testing suite at: http://localhost:3000/testing

This includes:
- Authentication tests
- Doctor management tests
- Appointment tests
- UI component tests

### Manual Testing
1. Login with different user roles
2. Test appointment booking workflow
3. Test doctor schedule management
4. Test admin dashboard functionality

## 📞 Support

### Getting Help
- Check the main README.md in the app/ directory
- Review the troubleshooting section above
- Check the application logs for error messages

### Log Files
- **Backend logs**: Check terminal where backend is running
- **Frontend logs**: Check browser console (F12)
- **MongoDB logs**: `/usr/local/var/log/mongodb/mongo.log` (macOS)

## 🚀 Production Deployment

For production deployment:

1. Set `NODE_ENV=production` in config.env
2. Use a production MongoDB instance
3. Set up proper SSL certificates
4. Configure environment variables securely
5. Use a process manager like PM2
6. Set up monitoring and logging

## 📝 Development Notes

- The application uses hot reloading in development mode
- Backend runs on port 5001, frontend on port 3000
- MongoDB runs on default port 27017
- All API requests from frontend are proxied to backend
- JWT tokens expire after 7 days

## 🎯 Success Indicators

You'll know the application is running correctly when:
- ✅ Backend server shows "Server running on port 5001"
- ✅ Frontend opens at http://localhost:3000
- ✅ You can login with the default credentials
- ✅ You can book appointments
- ✅ Admin dashboard shows system statistics

---

**Happy coding! 🎉**

For more detailed information, refer to the main README.md in the app/ directory.


